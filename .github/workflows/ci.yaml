name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  repository_dispatch:
    types: [start-ci]

env:
  ELIXIR_VERSION: 1.13.1
  OTP_VERSION: 24
  MIX_ENV: test
  NODE_VERSION: "16"

jobs:
  elixir-deps:
    name: Elixir dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
        env:
          ImageOS: ubuntu20

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}

      - name: Install Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile --warnings-as-errors
          mix dialyzer --plt

  npm-deps:
    name: Npm dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            assets/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('assets/package-lock.json') }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}        

      - name: Install NPM dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: cd assets && npm install

  codespell:
    name: Check common misspellings
    runs-on: ubuntu-20.04

    defaults:
      run:
        shell: bash

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install codespell
        run: |
          sudo apt-get install -y git python3 python3-pip
          python3 -m pip install codespell
      - name: codespell
        run: codespell -S priv*,*package*json,deps*,*node_modules*,*svg,*.git,*.app -L enque,daa

  static-code-analysis:
    name: Static Code Analysis
    needs: [elixir-deps, npm-deps]
    runs-on: ubuntu-20.04

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
        env:
          ImageOS: ubuntu20

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Retrieve Elixir Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}

      - name: Retrieve NPM Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            assets/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('assets/package-lock.json') }}

      - name: Check Code Format
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo

      - name: Run Dialyzer
        run: mix dialyzer

      - name: Run Eslint
        run: cd assets && npm run lint

      - name: Check JS Code Format
        run: cd assets && npm run format:check

  test:
    name: Test
    needs: [elixir-deps, npm-deps]
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trento_test
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}

      - name: Retrieve NPM Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            assets/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('assets/package-lock.json') }}

      - name: Run test
        run: mix test --color --trace --slowest 10

      - name: Run JS tests
        run: cd assets && npm test

  npm-e2e-deps:
    name: Npm E2E dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: npm-e2e-cache
        with:
          path: |
            test/e2e/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('test/e2e/package-lock.json') }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install E2E NPM dependencies
        if: steps.npm-e2e-cache.outputs.cache-hit != 'true'
        run: cd test/e2e && npm install

  test-e2e:
    name: End to end tests
    needs: [elixir-deps, npm-deps, npm-e2e-deps]
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: dev
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trento_dev
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      grafana:
        image: grafana/grafana:8.3.5
        ports:
          - 3000:3000
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
        env:
          ImageOS: ubuntu20

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/dev
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}

      - name: Retrieve NPM Cached Dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            assets/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('assets/package-lock.json') }}

      - name: Retrieve E2E NPM Cached Dependencies
        uses: actions/cache@v3
        id: npm-e2e-cache
        with:
          path: |
            test/e2e/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('test/e2e/package-lock.json') }}

      - name: Check Eslint and JS Code Format
        run: cd test/e2e && npm run lint && npm run format:check

      - name: Mix setup
        run: mix setup

      - name: Run trento detached
        run: mix phx.server &

      - name: Get Photofinish for e2e testing
        run: |
          set -x
          wget -P /tmp https://github.com/trento-project/photofinish/releases/download/v1.1.0/photofinish
          chmod +x /tmp/photofinish

      - name: Cypress run
        uses: cypress-io/github-action@v2
        env:
          cypress_video: false
          cypress_db_host: postgres
          cypress_db_port: 5432
          cypress_photofinish_binary: /tmp/photofinish
        with:
          working-directory: test/e2e
          headless: true
          wait-on-timeout: 30
          config: baseUrl=http://localhost:4000

      - name: Upload cypress test screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: test/e2e/cypress/screenshots/

  build-and-push-container-images:
    name: Build and push container images
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch'
    needs: [static-code-analysis, test, test-e2e]
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_REPOSITORY: ghcr.io/${{ github.repository_owner }}/trento-web
      IMAGE_TAG: "${{ (github.event_name == 'release' && github.event.release.tag_name) || (github.event_name == 'push' && github.ref_name == 'main' && 'rolling') || github.sha }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: ${{ env.IMAGE_REPOSITORY }}
      - name: Build and push container image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  obs-commit:
    name: Commit the project on OBS
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch'
    needs: [static-code-analysis, test, test-e2e]
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:
        GITHUB_OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEST_FOLDER: "/tmp/osc_project"
        NAME: trento-web-image
        OBS_USER: ${{ secrets.OBS_USER }}
        OBS_PASS: ${{ secrets.OBS_PASS }}
        OBS_PROJECT: ${{ secrets.OBS_PROJECT }}
        FOLDER: packaging/suse
        REPOSITORY: ${{ github.repository }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: latest-tag
        with:
          semver_only: true
          initial_version: 0.0.1

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install assets
        run: cd assets && npm install

      - name: Get mix deps
        run: mix local.hex --force && mix deps.clean --all && mix deps.get

      - name: Configure OSC
        # OSC credentials must be configured beforehand as the HOME variables cannot be changed from /github/home
        # that is used to run osc commands
        run: |
          /scripts/init_osc_creds.sh
          mkdir -p $HOME/.config/osc
          cp /root/.config/osc/oscrc $HOME/.config/osc

      - name: Prepare .changes file
        # The .changes file is updated only in release creation. This current task should be improved
        # in order to add the current rolling release notes
        if: github.event_name == 'release'
        run: |
          CHANGES_FILE=$NAME.changes
          osc checkout $OBS_PROJECT $NAME $CHANGES_FILE
          mv $CHANGES_FILE $FOLDER
          VERSION=${{ steps.latest-tag.outputs.tag }}
          hack/gh_release_to_obs_changeset.py $REPOSITORY -a shap-staff@suse.de -t $VERSION -f $FOLDER/$CHANGES_FILE

      - name: Set version
        run: |
          VERSION=${{ steps.latest-tag.outputs.tag }}
          sed -i 's~%%VERSION%%~'"${VERSION}"'~' packaging/suse/Dockerfile

      - name: Commit on OBS
        run: |
          OBS_PACKAGE=$OBS_PROJECT/$NAME
          osc checkout $OBS_PACKAGE -o $DEST_FOLDER
          cp -r packaging/suse/* $DEST_FOLDER
          tar --transform 's,^./,/web/,' -zcvf $DEST_FOLDER/web.tar.gz --exclude=./.git ./*
          cd $DEST_FOLDER
          osc ar
          osc commit -m "New development version of $NAME released"
