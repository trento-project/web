name: Pull request environment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

jobs:
  check-env-creation-privilege:
    name: Check if the environment creation criteria are met, store in the job output
    runs-on: ubuntu-24.04
    if: vars.PR_ENV_ALLOW_LIST != '' && vars.PR_ENV_LABEL != ''
    outputs:
      create_env: ${{ steps.check.outputs.create_env }}
    steps:
      - id: check
        run: echo "create_env=${{ contains(fromJson(vars.PR_ENV_ALLOW_LIST), github.event.sender.login) && contains(github.event.pull_request.labels.*.name, vars.PR_ENV_LABEL) }}" >> "$GITHUB_OUTPUT"

  build-container:
    name: Build container
    uses: ./.github/workflows/build-containers.yaml
    needs: check-env-creation-privilege
    if: needs.check-env-creation-privilege.outputs.create_env == 'true'
    with:
      image_name: trento-web
      tag: ${{ github.event.pull_request.number }}-env

  create-pr-environment:
    name: Create or update the pr environment
    runs-on: ubuntu-24.04
    needs: build-container
    env:
      PR_BASE_URL: ${{ github.event.pull_request.number }}.prenv.trento.suse.com
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - name: Checkout ansible repo
        uses: actions/checkout@v4
        with:
          repository: trento-project/ansible
          path: ansible
      - name: Install ansible-core
        run: sudo pipx install --force ansible-core==2.16.3
      - name: Install galaxy deps
        run: ansible-galaxy install -r ansible/requirements.yml
      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v3
        with:
          playbook: ansible/playbook.yml
          key: ${{ secrets.SSH_PR_MACHINE_KEY }}
          inventory: |
            all:
              vars:
                ansible_user: ec2-user
                ansible_python_interpreter: /usr/bin/python3
              children:
                trento_server:
                  hosts:
                    server:
                      ansible_host: ${{ secrets.PR_ENV_MACHINE_IP }}
                postgres_hosts:
                  hosts:
                    server:
                      ansible_host: ${{ secrets.PR_ENV_MACHINE_IP }}
                rabbitmq_hosts:
                  hosts:
                    server:
                      ansible_host: ${{ secrets.PR_ENV_MACHINE_IP }}
          options: |
            --extra-vars "web_postgres_db='${{ env.PR_NUMBER }}db' \
            web_postgres_event_store='${{ env.PR_NUMBER }}edb' \
            wanda_postgres_db='${{ env.PR_NUMBER }}wandadb' \
            web_postgres_user='${{ env.PR_NUMBER }}web' \
            wanda_postgres_user='${{ env.PR_NUMBER }}wanda' \
            web_container_name='${{ env.PR_NUMBER }}web' \
            web_container_image='ghcr.io/trento-project/trento-web:${{ env.PR_NUMBER }}-env' \
            wanda_container_image='ghcr.io/trento-project/trento-wanda:demo' \
            wanda_container_name='${{ env.PR_NUMBER }}wanda' \
            checks_container_name='${{ env.PR_NUMBER }}checks' \
            docker_network_name='${{ env.PR_NUMBER }}net' \
            nginx_vhost_filename='${{ env.PR_NUMBER }}' \
            trento_server_name='${{ env.PR_BASE_URL }}' \
            web_postgres_password='trento' \
            wanda_postgres_password='wanda' \
            rabbitmq_vhost='${{ env.PR_NUMBER }}' \
            rabbitmq_username='${{ env.PR_NUMBER }}rabbitusr' \
            rabbitmq_password='trento' \
            prometheus_url='http://localhost' \
            web_admin_password='adminpassword' \
            enable_api_key='false' \
            nginx_vhost_listen_port='443' \
            force_recreate_wanda_container='true' \
            force_recreate_web_container='true' \
            force_recreate_checks_container='true' \
            force_pull_images='true' \
            web_upstream_name='${{ env.PR_NUMBER }}web' \
            wanda_upstream_name='${{ env.PR_NUMBER }}wanda' \
            trento_server_url='http://${{ env.PR_BASE_URL }}' \
            nginx_ssl_cert_as_base64='true' \
            nginx_ssl_key_as_base64='true' \
            nginx_ssl_cert='${{ secrets.PR_ENV_SSL_CERT }}' \
            nginx_ssl_key='${{ secrets.PR_ENV_SSL_CERT_KEY }}' \
            install_method='docker'"

  run-photofinish-demo-env:
    name: Use photofinish to push mock data to the pr environment
    runs-on: ubuntu-24.04
    needs: create-pr-environment
    env:
      TRENTO_PR_ENV_URL: "${{ github.event.pull_request.number }}.prenv.trento.suse.com"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install photofinish
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: trento-project/photofinish
          tag: v1.4.2
          cache: enable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Give executable permissions to photofinish
        run: chmod +x $(whereis photofinish | cut -d" " -f2)
      - name: Push data
        run: |
          photofinish run healthy-27-node-SAP-cluster -u "https://$TRENTO_PR_ENV_URL/api/v1/collect"
          photofinish run hana-scale-out -u "https://$TRENTO_PR_ENV_URL/api/v1/collect"
          photofinish run hana-diskless-sbd -u "https://$TRENTO_PR_ENV_URL/api/v1/collect"
          photofinish run multi-tenant -u "https://$TRENTO_PR_ENV_URL/api/v1/collect"
          photofinish run hana-scale-up-angi -u "https://$TRENTO_PR_ENV_URL/api/collect"
          photofinish run java-system -u "https://$TRENTO_PR_ENV_URL/api/collect"
          photofinish run hana-scale-up-cost-opt -u "https://$TRENTO_PR_ENV_URL/api/collect"

  comment-pr:
    name: Comment on the PR with the environment URL
    runs-on: ubuntu-24.04
    needs: run-photofinish-demo-env
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Comment on the PR
        uses: actions/github-script@v7
        env:
          FQDN: prenv.trento.suse.com
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { onPrEnvCreated } = require('.github/scripts/pr_env.js')(github, context);
            onPrEnvCreated(process.env.FQDN).catch(console.error);
