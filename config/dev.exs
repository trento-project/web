import Config

# Configure your database
config :trento, Trento.Repo,
  url: "postgres://postgres@localhost:5432/trento_dev",
  show_sensitive_data_on_connection_error: true,
  log: false

config :trento, Trento.EventStore,
  url: "postgres://postgres@localhost:5432/trento_eventstore_dev",
  show_sensitive_data_on_connection_error: true,
  log: false

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with esbuild to bundle .js and .css sources.
config :trento, TrentoWeb.Endpoint,
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "s2ZdE+3+ke1USHEJ5O45KT364KiXPYaB9cJPdH3p60t8yT0nkLexLBNw8TFSzC7k",
  live_view: [signing_salt: "4tNZ+tm7"],
  watchers: [
    node: [
      "build.js",
      cd: Path.expand("../assets", __DIR__),
      env: %{"ESBUILD_WATCH" => "true"}
    ],
    npx: [
      "tailwindcss",
      "--input=css/app.css",
      "--output=../priv/static/assets/app.css",
      "--postcss",
      "--watch",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :trento, TrentoWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/trento_web/(live|views)/.*(ex)$",
      ~r"lib/trento_web/templates/.*(eex)$"
    ]
  ]

config :trento, Trento.Scheduler,
  jobs: [
    publish_telemetry: [
      schedule: {:extended, "@hourly"}
    ],
    clusters_checks_execution: [
      schedule: {:extended, "@hourly"}
    ]
  ]

config :trento, Trento.Integration.Telemetry, adapter: Trento.Integration.Telemetry.ToLogger
config :trento, Trento.Integration.Checks, adapter: Trento.Integration.Checks.MockRunner

config :trento, :extra_children, [Trento.Integration.Checks.MockRunner]

# Do not include metadata nor timestamps in development logs
# config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :trento, :api_key_authentication, enabled: false

config :trento, :grafana,
  user: "admin",
  password: "admin",
  public_url: "http://localhost:3000",
  api_url: "http://localhost:3000/api"

config :trento, Trento.Integration.Checks.Runner, runner_url: "http://localhost:8080"

config :trento, :alerting, recipient: "mail@domain.tld"
